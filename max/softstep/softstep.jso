









var Util = {};

Util.ArrayToString = function(s) {
  return Util.IsString(s) ? s : s[0];
};

Util.RemoveQuotes = function(s) {
  var begin = 0, end = s.length;
  if (end && s[begin] == '"')
    ++begin;
  if (end > begin && s[end - 1] == '"')
    --end;
  return s.substring(begin, end);
};

Util.LiveStringToString = function(s) {
  return Util.RemoveQuotes(Util.ArrayToString(s));
};

Util.endsWith = function(str, suffix) {
    return str.indexOf(suffix, str.length - suffix.length) !== -1;
};

Util.addSuffix = function(str, suffix) {
    return Util.endsWith(str, suffix) ? str : str + suffix;
};

function isString(s) {
    return (s.constructor === String);
}

Dict = {};

Dict.Setter = function(dict) {
    return function(key, value) {
        dict[key] = value;
    };
};

Dict.GetOrAddDefault = function(table, key, value) {
  if (key in table)
    value = table[key];
  else
    table[key] = value;

  return value;
};

Dict.Copy = function(dict) {
  return Dict.CopyTo(dict, {});
};

Dict.CopyTo = function(from, to) {
  for (var name in from)
    to[name] = from[name];
  return to;
};

Dict.values = function(dict) {
    var results = [];
    for (var i in dict)
        results.push(dict[i]);
    return results;
};

Dict.GetCommandFromMap = function(map, input) {
    if (!input || !input.length) {
        print('ERROR: Empty input', Print(input));
        return;
    }

    for (var i = 0; ; ++i) {
        if (!map) {
            print('ERROR: Didn\'t understand input', Print(input));
            return;
        }

        if (isString(map))
            return {command: map, data: input.slice(i + 1)};

        if (i >= input.length) {
            print('ERROR: Ran out during input', Print(input));
            return;
        }

        map = map[input[i]] || map['*'];
    }
};

Dict.remap = function(map, assignments) {
    var result = {};
    for (var a in assignments)
        result[map[a]] = assignments[a];
    return result;
};

Dict.update = function(to, from) {
    for (var i in from)
        to[i] = from[i];
};

Dict.offset = function(offset, dict) {
    var result = {};
    for (var i in dict)
        result[i] = dict[i] + offset;
    return result;
};

Dict.union = function(_) {
    var result = {};
    for (var i in arguments)
        Dict.update(result, arguments[i]);
    return result;
};

Dict.invert = function(array) {
    var result = {};
    forEach(array, function(value, index) {
        if (value in result)
            throw 'Dict.invert: Duplicate value ' + v;
        result[value] = index;
    });
    return result;
};

Dict.onEach = function(dict, f) {
    results = {}
    for (var k in dict)
        results[k] = f(dict[k], k);
    return results;
};

// Deprecated?
Dict.oneach = function(dict, f) {
    for (var k in dict)
        dict[k] = f(dict[k], k);
};


Dict.forEach = function(dict, f) {
    for (var k in dict)
        f(dict[k], k);
};

/** Get a value from a dictionary, or throw an exception. */
Dict.get = function(dict, key, errorName) {
    var result = dict[key];
    if (result !== undefined)
        return result;
    throw 'Couldn\'t find key ' + key + ' in dictionary ' + (errorName || '');
};

/** Return a function that gets a value from a dictionary, or throws an
    exception. */
Dict.getter = function(dict, errorName) {
    return function(key) {
        return Dict.get(dict, key, errorName);
    };
};

Dict.keyGetter = function(key, errorName) {
    return function(dict) {
        return Dict.get(dict, key, errorName || key);
    };
};

Dict.concat = function(args) {
    return args.reduce(function(p, c) { return p + c; }, []);
};

Dict.sequence = function(functions) {
    return function() {
        functions.forEach(function(f) { f(); });
    };
};

/** Flatten an array of arrays and promote scalars to arrays.
    The result is a flat list of non-lists. */
Dict.flatten = function(args) {
    if (!(args instanceof Array))
        return [args];
    var result = [];
    args.forEach(function(a) {
        result = result.concat(Dict.flatten(a));
    });
    return result;
};

Dict.fillArray = function(n, value) {
    var result = [];
    for (var i = 0; i < n; ++i)
        result.push(value);
    return result;
};




var Softstep = {};

Softstep.Enable = function(output) {
    var self = this;

    var sysex = {
        standalone: {
            off: [
                240, 0, 27, 72, 122, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0,
                9, 0, 11, 43, 58, 0, 16, 4, 0, 0, 0, 0, 0, 0, 0, 0, 23, 31, 0,
                0, 0, 0, 0, 247],

            on: [
                240, 0, 27, 72, 122, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0,
                9, 0, 11, 43, 58, 0, 16, 4, 1, 0, 0, 0, 0, 0, 0, 0, 47, 126, 0,
                0, 0, 0, 2, 247],
        },

        tether: {
            off: [
                240, 0, 27, 72, 122, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0,
                9, 0, 11, 43, 58, 0, 16, 3, 0, 0, 0, 0, 0, 0, 0, 0, 80, 7, 0,
                0, 0, 0, 0, 247],

            on: [
                240, 0, 27, 72, 122, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0,
                9, 0, 11, 43, 58, 0, 16, 3, 1, 0, 0, 0, 0, 0, 0, 0, 104, 102, 0,
                0, 0, 0, 0, 247],
        },

        el: {
            off: [
                240, 0, 27, 72, 122, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0,
                4, 0, 5, 8, 37, 0, 32, 0, 0, 76, 28, 0, 0, 0, 12, 247],
            on: [
                240, 0, 27, 72, 122, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0,
                4, 0, 5, 8, 37, 1, 32, 0, 0, 123, 44, 0, 0, 0, 12, 247],
        }
    };

    function Enable(name, en) {
        var sys = sysex[name];
        if (!sys) {
            print('Sofstep.Enable: Cannot enable "' + name + '"');
            return;
        }

        var e = sys[en];
        if (!e) {
            print('Softstep.Enable: enabled should be on or off, not "'
                  + en + '"');
            return;
        }
        output.apply(this, e);
    };

    self.El = function(e) { Enable('el', e); }
    self.Standalone = function(e) { Enable('standalone', e); }
    self.Tether = function(e) { Enable('tether', e); }

    self.Clear = function() {
        self.El('off');
    };
};




Softstep.Sensor = function(output) {
    var self = this;
    self.origin = 1;

    var sensorsPerPad = 4;
    var firstSensor = 40;
    var lastSensor = 86;
    var keyList = [5, 0, 6, 1, 7, 2, 8, 3, 9, 4, 'nav'];
    var midi;
    var listening;

    self.Clear = function() {
        midi = [];
        listening = true;
    };

    self.Clear();

    function controller(cc, value) {
        var key, sensor = 0;
        if (cc < firstSensor || cc > lastSensor || (cc in [84, 85])) {
            print("swirly/softstep/sensor.js: Don't understand controller", cc);
            return;
        }

        if (cc == lastSensor) {
            key = 'pedal';
        } else {
            var index = Math.floor((cc - firstSensor) / sensorsPerPad);
            key = keyList[index];
            sensor = cc % 4;
        }

        if (key != 'nav' && key != 'pedal')
            key += self.origin;

        output(key, sensor + self.origin, value);
    };

    self.MidiIn = function(bytes) {
        var byte = bytes[0];
        var isData = false;
        if (byte >= 0xc0)
            listening = false;
        else if (byte >= 0xb0)
            listening = true;
        else if (byte >= 0x80)
            listening = false;
        else
            isData = true;

        if (isData && listening) {
            midi.push(byte);
            if (midi.length >= 2) {
                controller(midi[0], midi[1]);
                midi = [];
            }
        }
    };
};




Softstep.LED = function(output) {
    var self = this;
    self.origin = 1;

    var GREEN = 0, RED = 1, YELLOW = 2;
    var colors = {green: GREEN, red: RED, yellow: YELLOW};

    var OFF = 0, ON = 1, BLINK = 2, FAST = 3, FLASH = 4;
    var states = {off: OFF, on: ON, blink: BLINK, fast: FAST, flash: FLASH};
    var COLOR_SIZE = 3;
    var STATE_SIZE = 5;
    var ALL = 127;
    var LED_SIZE = 10;

    function check(color, state) {
        if (colors[color] === null)
            print("Don't understand color '" + color + "'");
        else if (states[state] == null)
            print("Don't understand state '" + state + "'");
        else
            return true;

        return false;
    };

    function outputToLed(led, color, state) {
        output(0xb0, 40, led);
        output(0xb0, 41, color);
        output(0xb0, 42, state);
        output(0xb0, 0, 0);
        output(0xb0, 0, 0);
        output(0xb0, 0, 0);
    };

    function setLed(led, color, state) {
        print('Setting ', color, ' ', state);
        if (color == RED)
            outputToLed(led, GREEN, OFF);
        else if (color == GREEN)
            outputToLed(led, RED, OFF);

        outputToLed(led, color, state);
    };

    function ledToCCValue(led) {
        return (led == 'all') ? ALL : (led - self.origin);
    };

    function rand(s) {
        return Math.min(s - 1, Math.floor(Math.random() * s));
    };

    // Remove an item from the list, swap the last item in to its place, and
    // return the remove item.
    function removeAt(list, index) {
        var oldItem = list[index];
        var newItem = list.pop();
        if (oldItem !== newItem)
            list[index] = newItem;

        return oldItem;
    };

    // Remove and return a random item from a list.
    function popRandom(list) {
        if (list.length)
            return removeAt(list, rand(list.length));
    };

    // Set a given state and guarantee that the other states are off.
    self.Led = function(led, color, state) {
        if (check(color, state))
            setLed(ledToCCValue(led), colors[color], states[state]);
    };

    // Randomize the state of all the LEDs.
    self.Randomize = function() {
        for (var led = 0; led < LED_SIZE; ++led)
            setLed(led, rand(COLOR_SIZE), rand(STATE_SIZE));
    };

    var usedNotes = [], freeNotes = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9];
    self.Clear = function() {
        outputToLed(ALL, GREEN, OFF);
        outputToLed(ALL, RED, OFF);
        usedNotes = [];
        freeNotes = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9];
    };
};




// A "general" scroller that works for any sort of device where you can scroll a
// portion a string in a fixed character width display.
//
// rawOutput is a callback function that computes the scrolling string and sends
// it to Max (probably sending it to an outlet).
//
// config is a dictionary that can have the following properties:
//
//   callback:  this function is called when the last loop executes.
//
//   delta:     how to scroll - +1 is forward, -1 backward
//
//   message:   the message to scroll (default '').
//
//   period:    the delay between scroll increments, in ms (default 200).

Softstep.Display = function(rawOutput, config) {
    var self = this;

    function output(s) {
        s += '    ';
        for (var i = 0; i < 4; ++i)
            rawOutput(0xB0, 50 + i, s.charCodeAt(i));
    };

    self.config = config || {};
    self.queue = [];
    self.running = false;
    self.displayLength = self.config.displayLength ||
        Softstep.Display.defaultDisplayLength;

    // Display the current state of the display.
    function Display() {
        var m = (self.config && self.config.message) || '';
        var len = self.displayLength;
        while (m.length < len) // Only good if len is not large.
            m += ' ';
        m += ' ';

        output((m + m).substring(self.offset, self.offset + len));
    };

    // Pull off the next queue item, if any, and execute it.
    function NextQueue() {
        if (self.queue.length) {
            var command = self.queue.shift();
            if (typeof(command) == 'string')
                command = [command];

            self.SetMessage(command[0]);
            self.config.loops = parseInt(command[1] || '0');

            if (command.length > 2)
                self.config.period = parseInt(command[2]);

            self.Start();
        };
    };

    // Schedule the task exactly once.
    function Schedule() {
        var period = Math.max(self.config.period ||
                              Softstep.Display.defaultPeriod,
                              Softstep.Display.minimumPeriod);
        self.task.schedule(period);
    };

    self._Run = function() {
        self.running = Increment();
        Display();
        if (self.running)
            Schedule();
        else
            NextQueue();
    };

    // Deal with annoying bug in Task...
    function Run() {
        this._Run();
    };

    self.task = new Task(Run, this);

    function Increment() {
        self.offset += (self.config.delta || 1);
        if (self.offset < 0)
            self.offset = Length() - 1;
        else if (self.offset > Length())
            self.offset = 0;
        else
            return true;

        if (++self.loops <= self.config.loops)
            return true;

        if (self.config.loops)
            return false;

        return !self.queue.length;
    };

    // Length of the scrollable message (right-padded to fit the display).
    function Length() {
        var len = (self.config && self.config.message &&
                   self.config.message.length) || 0;
        return Math.max(self.displayLength, len);
    };

    self.Start = function() {
        self.Stop();
        self.loops = self.offset = 0;
        Display();
        Schedule();
        self.running = true;
    };

    self.Stop = function() {
        self.offset = 0;
        self.Freeze();
    };

    self.Clear = function() {
        self.config.message = '';
        self.queue = [];
        self.Stop();
    };

    self.Freeze = function() {
        self.task.cancel();

        Display();
        self.running = false;
    };

    self.Display = function(m) {
        self.config.message = m;
        self.offset = 0;
        self.loops = 0;
        Display();
    };

    self.Forward = function() {
        self.config.delta = 1;
    };

    self.Reverse = function() {
        self.config.delta = -1;
    };

    self.Period = function(p) {
        p = parseInt(p);
        self.config.period = p;
        if (self.task)
            self.task.interval = p;
    };

    self.Queue = function(_) {
        self.queue.push(arrayfromargs(arguments));
        if (!self.running)
            NextQueue();
    };
};

Softstep.Display.defaultDisplayLength = 4;
Softstep.Display.defaultPeriod = 200;

// I've taken Softstep.Display.minimumPeriod as low as 1 with no ill effects
// BUT the company warns you might brick your pedal.  BEWARE SETTING THIS TOO
// LOW.
Softstep.Display.minimumPeriod = 20;





Util.addCommands = function(_) {
  var results = {};
  for (var i = 0; i < arguments.length; ++i) {
    var object = arguments[i];
    for (var name in object) {
      var member = object[name];
      if (typeof(member) == 'function' && name[0] != '_')
        results[name.toLowerCase()] = member;
    }
  }
  return results;
};



var MAX_DEPTH = 10;

function Print(item, depth) {
  depth = depth || 0;
  if (depth > MAX_DEPTH)
    return 'MAX_DEPTH';

  if (item == null)
    return 'null';

  if (item == 'undefined')
    return 'undefined';

  var t = typeof(item);
  if (t == 'string')
    return '"' + item + '"';

  if (t == 'function')
    return (item.name || 'unknown') + '()';

  if (t != 'object')
    return item + '';

  var is_array = item instanceof Array;
  var result = [is_array ? '[' : '{'];

  for (var index in item) {
    if (result.length > 1)
      result[result.length - 1] += ', ';
    var value = Print(item[index], depth + 1);
    result.push(is_array ? value : '"' + index + '": ' + value);
  }
  result.push(is_array ? ']' : '}');
  return result.join('');
}

function PrintJoin(_) {
  var res = [];
  for (var i = 0; i < arguments.length; ++i)
    res.push(Print(arguments[i]));
  return res.join(' ');
}

// This is a VERY useful function - it converts Javascript objects into a
// human-readable form, prints them on one line and then adds a trailing \n.
function Postln(_) {
  for (var i = 0; i < arguments.length; ++i)
    post(Print(arguments[i]));

  post('\n');
}

function print(_) {
    if (arguments.length) {
        for (var i = 0; i < arguments.length; ++i)
            post(arguments[i]);
    } else {
        post(' ');
    }
    post();
}

function printable(x) {
    if (x === null)
        return '<null>';

    if (x === undefined)
        return '<undefined>';

    if (typeof(x) == 'object')
        return JSON.stringify(x);

    return String(x);
}

function maxLog(_) {
    for (var i = 0; i < arguments.length; i++)
        post(printable(arguments[i]));
}

Softstep.Controller = function(midiin, midiout, command, usingLH) {
    var parts = {
        display: new Softstep.Display(midiout),
        enable: new Softstep.Enable(midiout),
        led: new Softstep.LED(midiout),
        sensor: new Softstep.Sensor(command)
    };

    var self = this;

    self.Init = function() {
        print('Initializing softstep.');
        if (usingLH) {
            midiout('midiport', 'SSCOM Port 1');
            midiin('midiport', 'SSCOM Port 1');
        } else {
            midiout('SSCOM Port 1');
            midiin('SSCOM Port 1');
        }

        parts.enable.Tether('off');
        parts.enable.Standalone('on');
    };

    self.Origin = function(origin) {
        for (var p in parts)
            parts[p].origin = origin;
    };

    self.Clear = function() {
        for (var p in parts)
            parts[p].Clear();
    };

    self.sync = {
        sequence: false,
        items: [],
        color: 'red',
        invert: false,
    };

    self.Sync = function(cmd, val, _) {
        if (cmd === 'sequence')
            self.sync.sequence = true;
        else if (cmd == 'parallel')
            self.sync.sequence = false;
        else if (cmd == 'set')
            self.sync.items = arrayfromargs(arguments).slice(1);
        else if (cmd == 'clear')
            self.sync.items = [];
        else if (cmd == 'color')
            self.sync.color = value;
        else if (cmd == 'invert')
            self.sync.invert = (val != 'off' && val != 0);
        else
            print('Don\'t understand command: sync ', arrayfromargs(arguments));
    };

    function SetItemState(name, on) {
        if (self.sync.invert)
            on = !on;
        var state = (on ? 'on' : 'off');
        if (name == 'el')
            parts.enable.El(state);
        else if (name !== 'none')
            parts.led.Led(name, self.sync.color, state);
    };

    self.Beat = function(beat) {
        var len = self.sync.items.length;
        if (len) {
            var isSeq = self.sync.sequence;
            beat = beat % (isSeq ? len : 2);
            for (var i = 0; i < len; ++i)
                SetItemState(self.sync.items[i], isSeq ? (i == beat) : beat);
        }
    };

    self.Origin(1);

    var commands = Util.addCommands(
        parts.display, parts.enable, parts.led, this);
    self.commandNames = Object.keys(commands).sort().join(', ');

    self.Command = function(commandMessage) {
        var name = commandMessage.shift();
        var cmd = commands[name];
        if (cmd)
            cmd.apply(this, commandMessage);
        else
            print("Didn't understand command '" + name + '"');
    };

    self.MidiIn = parts.sensor.MidiIn;
};





var Max = new Object();
Max.patcher = this.patcher;




/** Imperfect function to iterate over different types.  If we start extending
 the prototypes of basic classes, this won't work.  */
function forEach(coll, f) {
    if (coll instanceof Array)
        coll.forEach(f);
    else
        Dict.forEach(coll, f);
}

var forEachObj = Dict.forEach;

function forEachSorted(coll, f) {
    var keys = Object.keys(coll);
    keys.sort();
    keys.forEach(function(key) {
        f(coll[key], key);
    });
};

function applyEachArray(coll, f) {
    var result = [];
    coll.forEach(function() {
        result.push(f.apply(this, arguments));
    });
    return result;
}

function applyEachObj(coll, f) {
    var result = {};
    for (var i in coll)
        result[i] = f(coll[i], i, coll);
    return result;
}

function appendEachObj(coll, f) {
    var result = [];
    for (var i in coll)
        result.push(f(coll[i], i, coll));
    return result;
}

function applyEach(coll, f) {
    var iterator = (coll instanceof Array) ? applyEachArray : applyEachObj;
    return iterator(coll, f);
}

function sequenceEach(functions) {
    return function(_) {
        var args = arguments;
        forEach(functions, function(func) {
            func.apply(this, args);
        });
    };
};

Max.inlets = {};
Max.scalarMessages = {msg_int: 1, msg_float: 1};
Max.applyEntry = true;

// Name each inlet and set a callback function
// Usage:
//   Max.SetInlets(['inletName', callbackFn, 'help'],
//                 ['nextInletName', callbackFn2, 'more help']);
// If there is no help entry, it defaults to the name of the inlet.
Max.SetInlets = function(_) {
    inlets = arguments.length;
    for (var i = 0; i < arguments.length; ++i) {
        var entry = arguments[i];
        Max.inlets[i] = {name: entry[0], func: entry[1]};
        var help = entry[2] ? (entry[0] + ': ' + entry[2]) : entry[0];
        setinletassist(i, help);
    }
};

/** New-style, with objects! */
Max.setInletsJson = function(json) {
    inlets = json.length;
    forEach(json, function(desc, i) {
        Max.inlets[i] = {name: desc.name, func: desc.delegate};
        var help = desc.name;
        if (desc.help)
            help += ': ' + desc.help;
        setinletassist(i, help);
    });
};

Max.ObjectInlets = function(object, names, methods) {
    var results = [];

    methods = methods || object._methods;
    if (methods) {
        for (var i in methods) {
            var method = methods[i],
                name = method[0],
                help = method[1] || name,
                func = method[2] || object[name];
            if (!func)
                print('ERROR! no function for', name);
            results.push([name, func, help]);
        }
    } else {
        names = names || object.names;
        for (var i = 0; i < names.length; ++i) {
            var name = names[i], help = name;
            if (name instanceof Array) {
                name = name[0];
                help = help[1];
            }

            results.push([name, object[name], help]);
        }
    }
    Max.SetInlets.apply(this, results);
};

Max.objectInlets = function(object, _) {
    var args = arrayfromargs(arguments);
    args.shift();
    Max.ObjectInlets(object, args);
    return object;
};

Max.SetterInlets = function(item) {
    Max.setterItem = item;
    var names = item.names;
    inlets = names.length;
    for (var i = 0; i < names.length; ++i)
        setinletassist(i, names[i]);
}

// Return the name of the current inlet, or the numeric name if you haven't set
// the names.
Max.Inlet = function() {
    return (inlet in Max.inlets) ? Max.inlets[inlet] : inlet;
};

function anything(_) {
    var item = Max.setterItem;
    if (item) {
        var name = item.names[inlet];
        if (arguments.length == 0)
            item[name] = messagename;
        else if (arguments.length == 1 && Max.scalarMessages[messagename])
            item[name] = arguments[0];
        else
            item[name] = arrayfromargs(arguments);

        item.lastUpdated = name;
        item.update();
    } else {
        var entry = Max.inlets[inlet];
        if (entry && entry.func) {
            var args = arrayfromargs(arguments);
            if (!(messagename == 'list' || Max.scalarMessages[messagename]))
                args = [messagename].concat(args);
            if (Max.applyEntry)
                entry.func.apply(this, args);
            else
                entry.func(args);
        } else {
            print('ERROR: anything didn\'t understand input for', inlet,
                  Max.Inlet());
        }
    }
};





// Max.SetOutlets sets the names and thus the number of outlets for your Max js
// box.
//
// A sample call looks like:
//
//    Max.SetOutlets('midi',
//                   ['synth', 'Messages to the synthesis subpatcher.'],
//                   ['finished', 'Outlets a bang when the song is finished.']);
//
// or more generally, like this:
//
//    Max.SetOutlets(out1, out2, ...);
//
// Each name argument can either be a string, or a list of two strings.  For
// each argument, the name of the corresponding outlet is the first string, and
// the help text is the second string, if there is one, or else the name of the
// outlet.
//
//    You should only call this function once, and you have to call it during
// the "top-level phase" when the Javascript is first being executed and before
// the box is actually created - if you try to call this later, nothing will
// fail, but you won't get the right number of outlets from the js box.
//
// Once you've called
// If you start with:
//
//   Max.SetOutlets('foo', 'bar', 'baz');
//
// then the following code blocks have identical meaning, and all send the
// message ['hello', 'world'] out the first outlet, named foo, and the message
// ['hello', 'there!'] and ['goodbye!' out the second Max outlet, named bar:
//
//   {
//     Max.Out('foo', 'hello', 'world');
//     Max.Out('bar', 'hello', 'there!');
//     Max.Out('bar', 'goodbye!');
//   }
//
//   {
//     Max.Out.foo('hello', 'world');
//     Max.Out.bar('hello', 'there!');
//     Max.Out.bar('goodbye!');
//   }
//
//   {
//     Max.ListOut(['foo', 'hello', 'world'],
//                 ['bar', 'hello', 'there!'],
//                 ['bar', 'goodbye!']);
//   }
//
//   {
//     Max.ListOut.foo(['hello', 'world']);
//     Max.ListOut.bar(['hello', 'there!'], ['goodbye!']);
//   }
//
//   {
//     var func = Max.Outer(['foo', 'hello', 'world'],
//                          ['bar', 'hello', 'there!'],
//                          ['bar', 'goodbye!']);
//     func();
//   }
//
//   {
//     var func1 = Max.Outer.foo(['hello', 'world']);
//     var func2 = Max.Outer.bar(['hello', 'there!'], ['goodbye!']);
//
//     func1();
//     func2();
//   }
//

Max._outlets = {};

// Outlet to a named outlet.  You can still use the numbered outlets, too.
// You can override this in tests if you want to capture the MIDI output.
//
Max.Outlet = function(outletNumber, data) {
  if (Max._outlets && outletNumber in Max._outlets)
    outletNumber = Max._outlets[outletNumber];
  outlet(outletNumber || 0, data);
};

Max.Out = function(out, _) {
  Max.Outlet(out, arrayfromargs(arguments).slice(1));
};

Max.ListOut = function(args) {
  for (var i = 0; i < args.length; ++i)
    Max.Outlet(args[i][0], args[i].slice(1));
};

Max.Outer = function(_) {
  var args = arguments;
  return function() {
    for (var i = 0; i < arguments.length; ++i)
      Max.Outlet(arguments[i][0], arguments[i].slice(1));
  };
};

Max.SetOutlets = function(_) {
  outlets = arguments.length;
  Max._outlets = {};
  for (var i = 0; i < arguments.length; i++) {
    var name = arguments[i], help = name;
      if (!isString(name)) {
      help = name[1] || name;
      name = name[0];
    }

    Max._outlets[name] = i;
    setoutletassist(i, help);
    var f = Max.OutletFunction(i);
    f.Partial = function(_) {
      var args = arrayfromargs(arguments);
      return function(_) {
        var a = args.concat(arrayfromargs(arguments));
        return f.apply(this, a);
      };
    };
    Max.Out[name] = f;

    Max.ListOut[name] = Max.OutletListFunction(i);
    Max.Outer[name] = Max.OutletFunctionMaker(i);
  }
};

//
// Implementation details below here!
//

// Returns a function that sends its arguments as a message to a given outlet.
Max.OutletFunction = function(out) {
  return function(_) {
    outlet(out, arrayfromargs(arguments));
  };
};

// Returns a function that sends its arguments as separate messages to a given
// outlet.
Max.OutletListFunction = function(out) {
  return function(_) {
    for (var i = 0; i < arguments.length; ++i)
      outlet(out, arguments[i]);
  };
};

// Returns a function that sends its arguments as separate messages to a given
// outlet.
Max.OutletFunctionMaker = function(out) {
  return function(messages) {
    return function() {
      for (var i = 0; i < messages.length; ++i)
        outlet(out, messages[i]);
    }
  };
};

// autowatch = 1;

Max.SetOutlets(
    ['midiout', 'Midi data to the softstep'],
    ['command', 'Commands from the softstep'],
    ['midiin', 'Commands to the midin or ctlin that receives softstep data']);

var _softstep = new Softstep.Controller(Max.Out.midiin,
                                        Max.Out.midiout,
                                        Max.Out.command);

Max.SetInlets(['midiin', _softstep.MidiIn,
               'Continuous controller data.'],

              ['command', _softstep.Command,
               'Commands to the softstep: ' + _softstep.commandNames]);

post('Compiled softstep.js on ' + new Date().toString(), '\n');
post('Commands are:', _softstep.commandNames, '\n');
